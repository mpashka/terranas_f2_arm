# *******************************************************************************************
# * Copyright (c) 2006-7 Laboratorio di Sistemi di Elaborazione e Bioingegneria Informatica *
# *                      Universita' Campus BioMedico - Italy                               *
# *                                                                                         *
# * This program is free software; you can redistribute it and/or modify it under the terms *
# * of the GNU General Public License as published by the Free Software Foundation; either  *
# * version 2 of the License, or (at your option) any later version.                        *
# *                                                                                         *
# * This program is distributed in the hope that it will be useful, but WITHOUT ANY         *
# * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 	    *
# * PARTICULAR PURPOSE. See the GNU General Public License for more details.                *
# *                                                                                         *
# * You should have received a copy of the GNU General Public License along with this       *
# * program; if not, write to the:                                                          *
# * Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,                    *
# * MA  02111-1307, USA.                                                                    *
# *                                                                                         *
# * --------------------------------------------------------------------------------------- *
# * Project:  Capwap                                                                        *
# *                                                                                         *
# * Author :  Ludovico Rossi (ludo@bluepixysw.com)                                          *  
# *           Del Moro Andrea (andrea_delmoro@libero.it)                                    *
# *           Giovannini Federica (giovannini.federica@gmail.com)                           *
# *           Massimo Vellucci (m.vellucci@unicampus.it)                                    *
# *	      Donato Capitella (d.capitella@gmail.com)  	                            *
# *******************************************************************************************

CFLAGS = -DRTK_CAPWAP 
ifeq ($(CONFIG_APP_OPENCAPWAP),y)
#------------------------------------------------------------------------------
# APMIB_SHARED, APMIB_LIB and COMMON_CFLAGS
#------------------------------------------------------------------------------
ifeq ($(wildcard $(DIR_LINUX)/.config),)
KERNEL_VER=linux-2.6.30
else
KERNEL_VER=$(patsubst $(DIR_ROOT)/%,%,$(DIR_LINUX))
endif


APMIB_SHARED = 1
DYNAMIC_WAN_IP = 1
GET_SERVER_IP_BY_DOMAIN = 1
ifeq ($(x86),1)
COMMON_CFLAGS += -DNO_ACTION
endif

ifeq ($(APMIB_SHARED),1)
COMMON_CFLAGS += -DCONFIG_APMIB_SHARED
APMIB_LIB = libapmib.so
else
APMIB_LIB = libapmib.a
endif

# User Management switch
UMSW	= -DUSER_MANAGEMENT_SUPPORT

# TLS client mode support
#TLS= -DTLS_CLIENT


# WLAN support
#-DWLAN_EASY_CONFIG
WLANSUPP = -DUNIVERSAL_REPEATER -DWLAN_WPA -DWLAN_WDS -DWLAN_8185AG -DWLAN_WPA2 $(TLS)
WLANSUPP += -DWIFI_SIMPLE_CONFIG

ifeq ($(CONFIG_RTL_11W_SUPPORT), y)
WLANSUPP += -DCONFIG_IEEE80211W
endif

ifeq ($(CONFIG_RTL_HS2_SUPPORT), y)
WLANSUPP += -DWLAN_HS2_CONFIG
endif

ifeq ($(CONFIG_APP_SIMPLE_CONFIG), y)
WLANSUPP += -DCONFIG_APP_SIMPLE_CONFIG
COMMON_CFLAGS += -DSET_MIB_FROM_FILE
else
ifeq ($(CONFIG_APP_RTK_INBAND_CTL), y)
COMMON_CFLAGS += -DSET_MIB_FROM_FILE
COMMON_CFLAGS += -DCONFIG_APP_RTK_INBAND_CTL
endif
endif

# Digest Access switch
DASW	= -DDIGEST_ACCESS_SUPPORT

# Gateway flag
GATEWAY = -DHOME_GATEWAY -DDOS_SUPPORT
ifeq ($(GW),1)
GATEWAY += -DROOT_FS
endif

# samba web support
ifeq ($(CONFIG_APP_SAMBA_WEB), y)
#COMMON_CFLAGS += -DSAMBA_WEB_SUPPORT
endif
ifeq ($(CONFIG_URL_FILTER_USER_MODE_SUPPORT),y)
COMMON_CFLAGS += -DURL_FILTER_USER_MODE_SUPPORT
endif
# routing support
ifeq ($(CONFIG_APP_ROUTED), y)
COMMON_CFLAGS += -DROUTE_SUPPORT
endif
ifeq ($(CONFIG_APP_BIRD), y)
COMMON_CFLAGS += -DRIP6_SUPPORT
endif

ifeq ($(CONFIG_APP_UPDATEDD), y)
COMMON_CFLAGS += -DDDNS_SUPPORT
endif

ifeq ($(CONFIG_APP_PPTP), y)
COMMON_CFLAGS += -DPPTP_SUPPORT
endif

ifeq ($(CONFIG_APP_L2TPD), y)
COMMON_CFLAGS += -DL2TP_SUPPORT
endif

ifeq ($(CONFIG_RTL_DEF_SETTING_IN_FW),y)
COMMON_CFLAGS += -DRTL_DEF_SETTING_IN_FW
endif

# boa cgi support
#export BOA_CGI_SUPPORT=y
ifeq ($(BOA_CGI_SUPPORT), y)
COMMON_CFLAGS += -DBOA_CGI_SUPPORT
endif

ifeq ($(CONFIG_RTL_11R_SUPPORT),y)
COMMON_CFLAGS += -DFAST_BSS_TRANSITION
endif
ifeq ($(DYNAMIC_WAN_IP), 1)
COMMON_CFLAGS += -DCONFIG_DYNAMIC_WAN_IP
ifeq ($(GET_SERVER_IP_BY_DOMAIN), 1)
COMMON_CFLAGS += -DCONFIG_GET_SERVER_IP_BY_DOMAIN
endif
endif

ifeq ($(CONFIG_MTD_NAND),y)
COMMON_CFLAGS += -DCONFIG_MTD_NAND
endif

ifeq ($(CONFIG_RPS),y)
COMMON_CFLAGS += -DCONFIG_RPS
endif

ifeq ($(CONFIG_RTK_VLAN_SUPPORT),y)
COMMON_CFLAGS += -DVLAN_CONFIG_SUPPORTED
endif

ifeq ($(CONFIG_RTL_SUPPORT_ACCESS_PORT_FORWARD_FROM_LAN),y)
COMMON_CFLAGS += -DCONFIG_RTL_SUPPORT_ACCESS_PORT_FORWARD_FROM_LAN
endif

ifeq ($(CONFIG_RTL_ULINKER),y)
COMMON_CFLAGS += -DCONFIG_RTL_ULINKER
endif


ifeq ($(CONFIG_RTL_STA_CONTROL_SUPPORT),y)
COMMON_CFLAGS += -DSTA_CONTROL
endif

ifeq ($(CONFIG_RTL_DOT11K_SUPPORT),y)
COMMON_CFLAGS += -DDOT11K
endif

#JOY: for smart roaming
ifeq ($(CONFIG_RTK_SMART_ROAMING), y)
COMMON_CFLAGS += -DRTK_SMART_ROAMING
COMMON_CFLAGS += -DRTK_DUAL_BAND_BLOCKING
COMMON_CFLAGS += -DRTK_AUTO_AC
COMMON_CFLAGS += -DRTK_DEBUG
endif

#for 11s mesh
ifeq ($(CONFIG_RTL_MESH_SUPPORT),y)
        SUBDIRS += 11s-PathSelection
        #MESH_EXTRA_CONFIG_FLAGS += -DCONFIG_RTK_MESH -D_MESH_ACL_ENABLE_ -DSNMP_SUPPORT -DCONFIG_NEW_MESH_UI
        MESH_EXTRA_CONFIG_FLAGS += -DCONFIG_RTK_MESH -D_MESH_ACL_ENABLE_ -DCONFIG_NEW_MESH_UI
        ifeq ($(CONFIG_TEST_PKG),y)
                #SUBDIRS += test_traffic netperf-2.4.4 
                #SUBDIRS += test_traffic
               MESH_EXTRA_CONFIG_FLAGS += -D_11s_TEST_MODE_
                TESTPKG=1
        endif
        ifeq ($(CONFIG_NMS),y)
                #SUBDIRS += net-snmp-5.2.3 nmsd burn_image
		MESH_EXTRA_CONFIG_FLAGS += -DSNMP_SUPPORT
                NMS=1
        endif
        TESTPKG?=0
        NMS?=0
endif
export MESH_EXTRA_CONFIG_FLAGS

WLANSUPP += $(MESH_EXTRA_CONFIG_FLAGS)

ifeq ($(CONFIG_RTL8192CD),y)
        WLANSUPP += -DCONFIG_RTL8192CD
endif

ifeq ($(CONFIG_RTL8196B_GW_8M),y)
	WLANSUPP += -DCONFIG_RTL8196B_GW_8M
endif

COMMON_CFLAGS += $(WLANSUPP) $(UMSW) $(DASW) -DDOWN_SIZE

ifdef CONFIG_DEFAULTS_KERNEL_2_6
COMMON_CFLAGS += -DCONFIG_DEFAULTS_KERNEL_2_6
endif

ifeq ($(CONFIG_APP_USBMOUNT),y)
COMMON_CFLAGS += -DCONFIG_APP_USBMOUNT
endif

ifeq ($(CONFIG_RTL_HIGH_PERFORMANCE_FILESYSTEM),y)
COMMON_CFLAGS += -DCONFIG_RTL_HIGH_PERFORMANCE_FILESYSTEM
endif

ifeq ($(CONFIG_USBDISK_UPDATE_IMAGE),y)
COMMON_CFLAGS += -DCONFIG_USBDISK_UPDATE_IMAGE
endif

ifeq ($(CONFIG_APP_SAMBA),y)
COMMON_CFLAGS += -DCONFIG_APP_SAMBA 
endif

ifeq ($(CONFIG_APP_VSFTPD),y)
COMMON_CFLAGS += -DCONFIG_APP_VSFTPD
endif

ifeq ($(CONFIG_APP_DLNA_DMS),y)
COMMON_CFLAGS += -DCONFIG_APP_DLNA_DMS
endif

ifeq ($(CONFIG_APP_CTORRENT), y)
COMMON_CFLAGS += -DCONFIG_RTL_BT_CLIENT
endif

ifeq ($(CONFIG_APP_TRANSMISSION), y)
COMMON_CFLAGS += -DCONFIG_RTL_TRANSMISSION
endif

ifeq ($(CONFIG_APP_SNMP),y)
COMMON_CFLAGS += -DCONFIG_SNMP
endif

ifeq ($(CONFIG_RTL_IVL_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_IVL_SUPPORT
endif

ifeq ($(CONFIG_RTL_FLASH_DUAL_IMAGE_ENABLE),y)
COMMON_CFLAGS += -DCONFIG_RTL_FLASH_DUAL_IMAGE_ENABLE 
endif

ifeq ($(CONFIG_RTL_FLASH_DUAL_IMAGE_WEB_BACKUP_ENABLE),y)
COMMON_CFLAGS += -DCONFIG_RTL_FLASH_DUAL_IMAGE_WEB_BACKUP_ENABLE
endif

ifeq ($(CONFIG_RTL_MULTI_REPEATER_MODE_SUPPORT),y)
COMMON_CFLAGS += -DRTL_MULTI_REPEATER_MODE_SUPPORT
endif

ifeq ($(CONFIG_RTL_MULTI_CLONE_SUPPORT),y)
COMMON_CFLAGS += -DRTL_MULTI_CLONE_SUPPORT
endif

ifeq ($(CONFIG_USB_SERIAL_OPTION),y)
COMMON_CFLAGS += -DRTK_USB3G
#ifeq ($(CONFIG_POCKET_ROUTER_SUPPORT),y)
#COMMON_CFLAGS += -DRTK_USB3G_PORT5_LAN
#endif
endif

ifeq ($(CONFIG_4G_LTE_SUPPORT), y)
COMMON_CFLAGS += -DCONFIG_4G_LTE_SUPPORT
endif

#CONFIG_RTL_DUAL_PCIESLOT_BIWLAN_D
#ifeq ($(CONFIG_RTL_DUAL_PCIESLOT_BIWLAN_D),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_1),y)
ifeq ($(CONFIG_RTL_92D_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_92D_DMDP  -DCONFIG_RTL_DUAL_PCIESLOT_BIWLAN_D -DFOR_DUAL_BAND
endif
endif
endif
ifeq ($(CONFIG_RTL_P2P_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_P2P_SUPPORT
endif

ifeq ($(CONFIG_RTL_92D_DMDP),y)
COMMON_CFLAGS += -DFOR_DUAL_BAND
endif

ifeq ($(CONFIG_WLAN_HAL_8881A),y)
ifeq ($(CONFIG_RTL_8881A_SELECTIVE),y)
COMMON_CFLAGS += -DCONFIG_RTL_8881A_SELECTIVE
else
COMMON_CFLAGS += -DCONFIG_RTL_92D_SUPPORT
endif
COMMON_CFLAGS += -DCONFIG_RTL_8812_SUPPORT
COMMON_CFLAGS += -DCONFIG_RTL_11AC_SUPPORT

ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)
COMMON_CFLAGS += -DFOR_DUAL_BAND
COMMON_CFLAGS += -DCONFIG_RTL_DUAL_PCIESLOT_BIWLAN_D
endif
endif

ifeq ($(CONFIG_WLAN_HAL_8814AE),y)
COMMON_CFLAGS += -DCONFIG_WLAN_HAL_8814AE
COMMON_CFLAGS += -DCONFIG_RTL_8881A_SELECTIVE
COMMON_CFLAGS += -DCONFIG_RTL_8812_SUPPORT
COMMON_CFLAGS += -DCONFIG_RTL_11AC_SUPPORT
COMMON_CFLAGS += -DCONFIG_RTL_92D_SUPPORT
ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_1),y)
COMMON_CFLAGS += -DCONFIG_RTL_DUAL_PCIESLOT_BIWLAN
COMMON_CFLAGS += -DCONFIG_RTL_DUAL_PCIESLOT_BIWLAN_D
COMMON_CFLAGS += -DFOR_DUAL_BAND
endif
endif
endif

#ifeq ($(CONFIG_RTL_DUAL_92C_8812E),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_1),y)
ifeq ($(CONFIG_RTL_8812_SUPPORT),y)
COMMON_CFLAGS += -DFOR_DUAL_BAND
COMMON_CFLAGS += -DCONFIG_RTL_92D_SUPPORT
COMMON_CFLAGS += -DCONFIG_RTL_DUAL_PCIESLOT_BIWLAN_D
endif
endif
endif
ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)                                                            
ifeq ($(CONFIG_USE_PCIE_SLOT_1),y)                                                            
ifeq ($(CONFIG_RTL_8367R_SUPPORT),y)
COMMON_CFLAGS += -DRTL_8367R_DUAL_BAND
endif
endif
endif

ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)
ifeq ($(CONFIG_RTL_8881A),y)
ifeq ($(CONFIG_RTL_8367R_SUPPORT),y)
COMMON_CFLAGS += -DRTL_8367R_8881a_DUAL_BAND
endif
endif
endif

ifeq ($(CONFIG_SLOT_0_8192EE),y)
COMMON_CFLAGS += -DCONFIG_RTL8192E
endif
ifeq ($(CONFIG_SLOT_1_8192EE),y)
COMMON_CFLAGS += -DCONFIG_RTL8192E
endif
#
# Extra Feature Configuration
#
ifeq ($(CONFIG_HTTP_FILE_SERVER_SUPPORT),y)
COMMON_CFLAGS += -DHTTP_FILE_SERVER_SUPPORTED
COMMON_CFLAGS += -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -DENABLE_LFS
COMMON_CFLAGS += -DHTTP_FILE_SERVER_HTM_UI
endif
ifeq ($(CONFIG_RTL_USB_IP_HOST_SPEEDUP),y)
COMMON_CFLAGS += -DRTL_USB_IP_HOST_SPEEDUP
COMMON_CFLAGS += -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -DENABLE_LFS
endif

ifeq ($(CONFIG_RTL_STP),y)
COMMON_CFLAGS += -DCONFIG_RTL_STP
endif

ifeq ($(CONFIG_BASEON_SCHEDULE_FILTER),y)
COMMON_CFLAGS += -DCONFIG_SCH_FILTER
endif

ifeq ($(CONFIG_IPV6),y)
COMMON_CFLAGS += -DCONFIG_IPV6
endif

ifeq ($(CONFIG_IPV6_CE_ROUTER_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_IPV6_CE_ROUTER_SUPPORT
endif

ifeq ($(CONFIG_RTL_819X),y)
	COMMON_CFLAGS += -DCONFIG_RTL_819X
endif

ifeq ($(CONFIG_RTL_819XD),y)
	COMMON_CFLAGS += -DCONFIG_RTL_819XD
endif
ifeq ($(CONFIG_RTL_8196B_GW),y)
	COMMON_CFLAGS += -DCONFIG_RTL_8196B
endif

ifeq ($(CONFIG_RTL_8196C_GW),y)
	COMMON_CFLAGS += -DCONFIG_RTL_8196C
endif

ifeq ($(CONFIG_RTL_8198C),y)
COMMON_CFLAGS += -DCONFIG_RTL_8198C
endif

ifeq ($(CONFIG_DSLITE_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_DSLITE_SUPPORT
endif

ifeq ($(CONFIG_SIXRD_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_SIXRD_SUPPORT
endif

ifeq ($(CONFIG_RTL_8198_GW),y)
	COMMON_CFLAGS += -DCONFIG_RTL_8198
endif

ifeq ($(CONFIG_RTL_8198_AP_ROOT),y)
        COMMON_CFLAGS += -DCONFIG_RTL_8198 -DCONFIG_RTL_8198_AP_ROOT
ifdef CONFIG_8198_PORT5_GMII
	COMMON_CFLAGS += -DGMII_ENABLED
endif
endif

ifeq ($(CONFIG_RTL_8197D_AP),y)
	COMMON_CFLAGS += -DCONFIG_RTL_8197D_AP
endif

ifeq ($(CONFIG_RTL_AP_PACKAGE),y)
	COMMON_CFLAGS += -DCONFIG_RTL_AP_PACKAGE
endif

ifeq ($(CONFIG_RTL_819XD),y)
	COMMON_CFLAGS += -DCONFIG_RTL_819XD
endif

ifeq ($(CONFIG_RTL_8196E),y)
	COMMON_CFLAGS += -DCONFIG_RTL_8196E
endif

ifeq ($(CONFIG_RTL_8198B),y)
	COMMON_CFLAGS += -DCONFIG_RTL_8198B
endif

ifeq ($(CONFIG_POCKET_ROUTER_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_POCKET_ROUTER_SUPPORT
endif

ifeq ($(CONFIG_POCKET_AP_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_POCKET_AP_SUPPORT
endif

ifeq ($(CONFIG_DOMAIN_NAME_QUERY_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_DOMAIN_NAME_QUERY_SUPPORT
endif

ifeq ($(CONFIG_RTL_DFS_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_RTL_DFS_SUPPORT
endif

ifeq ($(CONFIG_RTL_CLIENT_MODE_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_WLAN_CLIENT_MODE
endif
 
ifeq ($(CONFIG_RTL_REPEATER_MODE_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_WLAN_REPEATER_MODE
endif

ifeq ($(CONFIG_RTL_WDS_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_WLAN_WDS_SUPPORT
endif

ifeq ($(CONFIG_RTL_VAP_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_WLAN_VAP_SUPPORT
endif

ifeq ($(CONFIG_PCIE_POWER_SAVING),y)
COMMON_CFLAGS += -DPOWER_CONSUMPTION_SUPPORT
endif

ifeq ($(CONFIG_RTL_8196_SPI_FLASH),y)
	COMMON_CFLAGS += -DCONFIG_RTL8196_SPI
endif

ifeq ($(CONFIG_RTL_WAPI_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_WAPI_SUPPORT
ifeq ($(CONFIG_RTL_WAPI_LOCAL_AS_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_WAPI_LOCAL_AS_SUPPORT
endif
endif

ifeq ($(CONFIG_APP_IAPP),y)
	COMMON_CFLAGS += -DCONFIG_IAPP_SUPPORT
endif

ifeq ($(CONFIG_RTL_802_1X_CLIENT_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_RTL_802_1X_CLIENT_SUPPORT
endif
ifeq ($(CONFIG_RTL_ETH_802DOT1X_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_RTL_ETH_802DOT1X_SUPPORT
endif
ifeq ($(CONFIG_RTL_ETH_802DOT1X_CLIENT_MODE_SUPPORT),y)
    COMMON_CFLAGS += -DCONFIG_RTL_ETH_802DOT1X_CLIENT_MODE_SUPPORT
endif
#add mld snooping support
ifeq ($(CONFIG_IGMPV3_SUPPORT),y)
	COMMON_CFLAGS += -DCONFIG_IGMPV3_SUPPORT
endif

#add mld snooping support
ifeq ($(CONFIG_RTL_MLD_SNOOPING),y)
	COMMON_CFLAGS += -DCONFIG_RTL_MLD_SNOOPING
endif

ifeq ($(CONFIG_RTL_COMAPI_CFGFILE),y)
	COMMON_CFLAGS += -DCONFIG_IWPRIV_INTF
	COMMON_CFLAGS += -DCONFIG_RTL_COMAPI_CFGFILE
endif

COMMON_CFLAGS += -DCONFIG_FLASH_SIZE=$(CONFIG_RTL_FLASH_SIZE)

ifeq ($(CONFIG_RTL_FLASH_MAPPING_ENABLE),y)
	COMMON_CFLAGS += -DCONFIG_RTL_FLASH_MAPPING_ENABLE
ifdef CONFIG_RTL_HW_SETTING_OFFSET
	COMMON_CFLAGS += -DCONFIG_RTL_HW_SETTING_OFFSET=$(CONFIG_RTL_HW_SETTING_OFFSET)
endif

ifdef CONFIG_RTL_DEFAULT_SETTING_OFFSET
	COMMON_CFLAGS += -DCONFIG_RTL_DEFAULT_SETTING_OFFSET=$(CONFIG_RTL_DEFAULT_SETTING_OFFSET)
endif

ifdef CONFIG_RTL_CURRENT_SETTING_OFFSET
	COMMON_CFLAGS += -DCONFIG_RTL_CURRENT_SETTING_OFFSET=$(CONFIG_RTL_CURRENT_SETTING_OFFSET)
endif

ifdef CONFIG_RTL_WEB_PAGES_OFFSET
	COMMON_CFLAGS += -DCONFIG_RTL_WEB_PAGES_OFFSET=$(CONFIG_RTL_WEB_PAGES_OFFSET)
endif

ifdef CONFIG_RTL_LINUX_IMAGE_OFFSET  
	COMMON_CFLAGS += -DCONFIG_RTL_CODE_IMAGE_OFFSET=$(CONFIG_RTL_LINUX_IMAGE_OFFSET)
endif

ifdef CONFIG_RTL_ROOT_IMAGE_OFFSET 
	COMMON_CFLAGS += -DCONFIG_RTL_ROOT_IMAGE_OFFSET=$(CONFIG_RTL_ROOT_IMAGE_OFFSET)
endif
endif

ifeq ($(CONFIG_RTL_MULTI_LAN_DEV),y)
	COMMON_CFLAGS += -DCONFIG_RTL_MULTI_LAN_DEV
endif

ifeq ($(CONFIG_RTL_HW_NAPT), y)
	COMMON_CFLAGS += -DCONFIG_RTL_HW_NAPT
endif

ifeq ($(CONFIG_RTL_LAYERED_DRIVER_ACL),y)
	COMMON_CFLAGS += -DCONFIG_RTL_LAYERED_DRIVER_ACL
endif

ifeq ($(CONFIG_RTK_VLAN_SUPPORT), y)
	COMMON_CFLAGS += -DCONFIG_RTK_VLAN_SUPPORT
endif

ifeq ($(CONFIG_RTK_VLAN_WAN_TAG_SUPPORT), y)
	COMMON_CFLAGS += -DCONFIG_RTK_VLAN_WAN_TAG_SUPPORT
endif

ifeq ($(CONFIG_RTK_VLAN_NEW_FEATURE),y)
        COMMON_CFLAGS += -DCONFIG_RTK_VLAN_NEW_FEATURE
endif
ifeq ($(CONFIG_RTL_HW_VLAN_SUPPORT),y)
        COMMON_CFLAGS += -DCONFIG_RTL_HW_VLAN_SUPPORT
endif
# For mini_upnp stand alone
COMMON_CFLAGS += -DSTAND_ALONE_MINIUPNP

ifeq ($(CONFIG_RTL_92D_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_92D_SUPPORT 
endif

ifeq ($(CONFIG_RTL_8812_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_8812_SUPPORT 
endif

ifeq ($(CONFIG_RTL_AC2G_256QAM),y)
COMMON_CFLAGS += -DCONFIG_RTL_AC2G_256QAM
endif

ifeq ($(CONFIG_RTL_8812AR_VN_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_8812AR_VN_SUPPORT
endif
ifeq ($(CONFIG_RTL_8812_1T1R_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_8812_1T1R_SUPPORT
endif

ifeq ($(CONFIG_RTL_8814_8194_2T2R_SUPPORT),y)
COMMON_CFLAGS += -DCONFIG_RTL_8814_8194_2T2R_SUPPORT
endif


ifeq ($(CONFIG_RTL_92D_DMDP),y)
COMMON_CFLAGS += -DCONFIG_RTL_92D_DMDP
endif

ifeq ($(CONFIG_ENABLE_EFUSE),y)
COMMON_CFLAGS += -DWLAN_MAC_FROM_EFUSE
endif

ifeq ($(CONFIG_RTL_FAST_FILTER), y)
COMMON_CFLAGS += -DCONFIG_RTL_FAST_FILTER 
endif

ifeq ($(CONFIG_BAND_2G_ON_WLAN0), y)
COMMON_CFLAGS += -DCONFIG_BAND_2G_ON_WLAN0
endif

ifeq ($(CONFIG_BAND_5G_ON_WLAN0), y)
COMMON_CFLAGS += -DCONFIG_BAND_5G_ON_WLAN0
endif

#ifeq ($(CONFIG_RTL_DUAL_PCIESLOT_BIWLAN),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_0),y)
ifeq ($(CONFIG_USE_PCIE_SLOT_1),y)
ifeq ($(CONFIG_SLOT_0_92C),y)
ifeq ($(CONFIG_SLOT_1_92C),y)
COMMON_CFLAGS += -DCONFIG_RTL_DUAL_PCIESLOT_BIWLAN
endif
endif
endif
endif

ifeq ($(CONFIG_RTL_WLAN_DOS_FILTER),y)
COMMON_CFLAGS += -DCONFIG_RTL_WLAN_DOS_FILTER
endif

#zj: add for QoS
ifeq ($(GW),1)
	GATEWAY += -DENABLE_QOS
#	ifneq ($(CONFIG_QOS_UI_BY_BANDWIDTH),n)
#	ifneq ($(CONFIG_QOS_UI_BY_BANDWIDTH),)
                GATEWAY += -DQOS_BY_BANDWIDTH
#	endif
#	endif
endif

ifeq ($(CONFIG_NETFILTER_XT_MATCH_LAYER7),y)
GATEWAY += -DCONFIG_NETFILTER_XT_MATCH_LAYER7
endif

ifeq ($(CONFIG_APP_FWD),y)
COMMON_CFLAGS += -DCONFIG_APP_FWD
endif

ifeq ($(CONFIG_APP_BOA_NEW_UI),y)
COMMON_CFLAGS += -DCONFIG_APP_BOA_NEW_UI
endif

ifeq ($(CONFIG_APP_BOA_AUTO_RECOVER),y)
COMMON_CFLAGS += -DCONFIG_APP_BOA_AUTO_RECOVER
endif

ifeq ($(CONFIG_APP_TR069),y)
COMMON_CFLAGS += -DCONFIG_APP_TR069
COMMON_CFLAGS += -D_PRMT_X_TELEFONICA_ES_DHCPOPTION_
#COMMON_CFLAGS += -D_ALPHA_DUAL_WAN_SUPPORT_

ifeq ($(CONFIG_USER_CWMP_WITH_SSL),y)
COMMON_CFLAGS += -D_CWMP_WITH_SSL_
endif

ifneq ($(CONFIG_MTD_CHAR), y)
ifeq ($(KERNEL_VER),linux-2.6.30)
$(error You have to turn on the kernel option "CONFIG_MTD_CHAR" for TR069)
endif
endif

#ifneq ($(CONFIG_MTD_CHAR), y)
#$(error You have to turn on the kernel option "CONFIG_MTD_CHAR" for TR069)
#endif

ifeq ($(CONFIG_USER_CWMP_WITH_TR143),y)
COMMON_CFLAGS += -DCONFIG_USER_CWMP_WITH_TR143
endif

endif

ifdef CONFIG_USER_CWMP_WITH_TR181_V6
COMMON_CFLAGS += -DTR181_SUPPORT
endif

ifdef CONFIG_RTL_WEBPAGES_IN_ROOTFS
COMMON_CFLAGS += -DCONFIG_RTL_WEBPAGES_IN_ROOTFS
endif

ifdef CONFIG_APP_AUTH_2NDSRV
COMMON_CFLAGS += -DCONFIG_APP_AUTH_2NDSRV
endif

ifeq ($(GW),1)
COMMON_CFLAGS += $(GATEWAY)
endif

ifeq ($(CONFIG_RTL_SUPPORT_MULTI_PROFILE),y)
COMMON_CFLAGS += -DWLAN_PROFILE
endif

ifeq ($(CONFIG_APP_MINIIGD-1.8),y)
COMMON_CFLAGS += -DUSE_MINIUPNPD_V1.8
endif

ifeq ($(CONFIG_APP_EBTABLES),y)
COMMON_CFLAGS += -DCONFIG_APP_EBTABLES
endif

ifeq ($(CONFIG_APP_SMTP_CLIENT),y)
COMMON_CFLAGS += -DCONFIG_APP_SMTP_CLIENT
endif

ifeq ($(CONFIG_APP_RTK_VOIP),y)
PWD := $(shell pwd)
ifeq ($(CONFIG_APP_RTK_VOIP_E8C),y)
export VOIP_APP = $(PWD)/../rtk_voip-e8c
else
ifdef CONFIG_RTK_VOIP_DRIVERS_PCM89xxE
export VOIP_APP = $(PWD)/../rtk_voip-89xxE
else
export VOIP_APP = $(PWD)/../rtk_voip
endif
endif
COMMON_CFLAGS += -DVOIP_SUPPORT -I$(VOIP_APP)/includes -I$(VOIP_APP)/web -I$(PWD) -I$(PWD)/..
ifdef CONFIG_RTK_VOIP_PACKAGE_867X
COMMON_CFLAGS += -DATA867x
endif
ifdef CONFIG_RTK_VOIP_IP_PHONE
COMMON_CFLAGS += -I$(VOIP_APP)/ui/include
endif
endif

ifdef CONFIG_EBTABLES_KERNEL_SUPPORT
COMMON_CFLAGS += -DCONFIG_EBTABLES_KERNEL_SUPPORT
endif

ifndef CONFIG_RTL_AP
COMMON_CFLAGS += -DSEND_GRATUITOUS_ARP
endif
ifeq ($(CONFIG_APP_CPU_UTILIZATION), y)
COMMON_CFLAGS += -DCONFIG_CPU_UTILIZATION
endif
ifeq ($(CONFIG_SUPPORT_RUSSIA_FEATURES),y)
COMMON_CFLAGS += -DSUPPORT_ZIONCOM_RUSSIA
endif

ifeq ($(CONFIG_APP_RADVD),y)
ifeq ($(CONFIG_IPV6_CE_ROUTER_SUPPORT),y)
COMMON_CFLAGS += -DSUPPORT_RDNSS_OPTION -DSUPPORT_DNSSL_OPTION
endif
endif

ifeq ($(CONFIG_IPV6_CE_ROUTER_SUPPORT),y)
COMMON_CFLAGS += -DSUPPORT_DEFEAT_IP_SPOOL_DOS 
endif

ifdef CONFIG_RTL_SHRINK_INIT_TIME
COMMON_CFLAGS += -DSHRINK_INIT_TIME
endif

ifeq ($(CONFIG_RTL_USERSPACE_WTDOG),y)
COMMON_CFLAGS += -DAPP_WATCHDOG
endif

ifdef CONFIG_RTL_NO_BR_SHORTCUT
ifneq ($(CONFIG_RTL_NO_BR_SHORTCUT),y)
COMMON_CFLAGS += -DCONFIG_RTL_BR_SHORTCUT_SUPPORT
endif
endif

ifeq ($(KERNEL_VER),linux-2.6.30)
COMMON_CFLAGS += -I../../linux-2.6.30/include
endif
ifeq ($(KERNEL_VER),linux-3.10)
COMMON_CFLAGS += -I../../linux-3.10/include/uapi
endif

CFLAGS += $(COMMON_CFLAGS)

#LDFLAGS = ../openssl-1.0.2a/libssl.a ../openssl-1.0.2a/libcrypto.a 
#LDFLAGS = -L../../toolchain/rsdk-1.5.5-5281-EB-2.6.30-0.9.30.3-110714/lib -lpthread -ldl -D_REENTRANT ../boa/apmib/libapmib.so
LDFLAGS = -L$(DIR_RSDK)/lib -lpthread -ldl -D_REENTRANT ../boa/apmib/libapmib.so
#OPENSSL_INCLUDE = -I../openssl-1.0.2a/include #Openssl include files

else
CC = gcc 
CFLAGS += -DX86_SIMULATION
LDFLAGS = -lssl -lcrypto -lpthread -ldl -D_REENTRANT
endif #end of ($(CONFIG_APP_OPENCAPWAP),y)

##################################################################
CFLAGS += -Wall -g -O0 -D_REENTRANT -DCW_NO_DTLS 
#CFLAGS += -DCW_NO_DTLS -DCW_NO_DTLSCWParseConfigurationUpdateRequest

# Memory leak
#LDFLAGS += ../dmalloc-5.5.0/libdmallocth.a
#CFLAGS += -DDMALLOC

# Capwap Debugging

CFLAGS += -DCW_DEBUGGING 
#CFLAGS += -DWRITE_STD_OUTPUT
#CFLAGS += -DSOFTMAC
CFLAGS += -DOPENSSL_NO_KRB5
#OpenSSL inc files path
CFLAGS += $(OPENSSL_INCLUDE)  

RM = /bin/rm -f 

CFLAGS += #-DKM_BY_AC

# list of generated object files for AC. 
AC_OBJS = AC.o ACConfigFile.o ACMainLoop.o ACDiscoveryState.o ACJoinState.o\
	ACConfigureState.o ACDataCheckState.o ACRunState.o ACProtocol_User.o \
	ACRetransmission.o CWCommon.o CWConfigFile.o CWErrorHandling.o CWList.o \
	CWLog.o ACMultiHomedSocket.o  ACProtocol.o CWSafeList.o CWNetwork.o CWProtocol.o \
	CWRandom.o CWStevens.o CWThread.o CWBinding.o CWVendorPayloadsAC.o \
	ACBinding.o ACInterface.o ACSettingsFile.o timerlib.o
# ACImageDataState.o
# CWSecurity.o CWOpenSSLBio.o

# list of generated object files for WTP. 
WTP_OBJS = WTP.o WTPConfigFile.o WTPProtocol.o WTPProtocol_User.o \
	WTPDiscoveryState.o WTPJoinState.o WTPConfigureState.o WTPDataCheckState.o WTPRunState.o WTPRunStateCheck.o \
	WTPRetransmission.o WTPSulkingState.o CWCommon.o CWConfigFile.o CWErrorHandling.o CWSafeList.o CWList.o CWLog.o CWNetwork.o \
	CWProtocol.o CWRandom.o CWStevens.o CWThread.o CWBinding.o CWVendorPayloadsWTP.o WTPBinding.o \
	WTPSettingsFile.o timerlib.o
#AUTO_AC re-Discovery
AACWTP_OBJS = AACWTP.o WTPConfigFile.o WTPProtocol.o WTPProtocol_User.o \
	AACWTPDiscoveryState.o WTPJoinState.o WTPConfigureState.o WTPDataCheckState.o WTPRunState.o WTPRunStateCheck.o \
	WTPRetransmission.o WTPSulkingState.o CWCommon.o CWConfigFile.o CWErrorHandling.o CWSafeList.o CWList.o CWLog.o CWNetwork.o \
	CWProtocol.o CWRandom.o CWStevens.o CWThread.o CWBinding.o CWVendorPayloadsWTP.o WTPBinding.o \
	WTPSettingsFile.o timerlib.o
# WTPImageDataState.o
# CWSecurity.o CWOpenSSLBio.o

# for RTK_CAPWAP
AC_OBJS += ACRtkSystemInteraction.o
WTP_OBJS += WTPRtkSystemInteraction.o
#TED AUTO_AC re-Discovery
AACWTP_OBJS +=WTPRtkSystemInteraction.o

# ifdef KM_BY_AC
#AC_OBJS += ACipcHostapd.o
#WTP_OBJS += WTPRtkFrameReceive.o WTPipcHostapd.o WTPFreqStatsReceive.o WTPStatsReceive.o
WTP_OBJS += WTPRtkFrameReceive.o 

AACWTP_OBJS += WTPRtkFrameReceive.o 

#WUA_OBJS = WUA.o
WUM_OBJS = wum.o wumLib.o
TST_OBJS = WTPRtkSystemInteraction.o CWLog.o CWThread.o CWErrorHandling.o timerlib.o
 
AC_SRCS = $(AC_OBJS:.o=.c) 
WTP_SRCS = $(WTP_OBJS:.o=.c)

AACWTP_SRCS = $(AACWTP_OBJS:.o=.c)
#WUA_SRCS = $(WUA_OBJS:.o=.c)
WUM_SRCS = $(WUM_OBJS:.o=.c)
TST_SRCS = $(WUM_OBJS:.o=.c)

AC_DEPS := $(AC_OBJS:.o=.d)
WTP_DEPS := $(WTP_OBJS:.o=.d)

AACWTP_DEPS := $(AACWTP_OBJS:.o=.d)
#WUA_DEPS := $(WUA_OBJS:.o=.d)
WUM_DEPS := $(WUM_OBJS:.o=.d)
TST_DEPS := $(TST_OBJS:.o=.d)

# program executables. 
AC_NAME = AC 
WTP_NAME = WTP 

AACWTP_NAME = AACWTP 
#WUA_NAME = WUA
WUM_NAME = wum

.PHONY: deps clean clean_libs libs

ifeq ($(CONFIG_APP_OPENCAPWAP),y)
# top-level rule, to compile everything. 
#all: deps $(AC_NAME) $(WTP_NAME) $(WUM_NAME) $(TST_NAME) write_setting
all: deps $(AC_NAME) $(WTP_NAME) $(AACWTP_NAME) $(WUM_NAME) $(TST_NAME) write_setting
#$(WUA_NAME)

romfs:
	$(ROMFSINST) /bin/$(WTP_NAME)
	$(ROMFSINST) /bin/$(AACWTP_NAME)
	$(ROMFSINST) /bin/$(AC_NAME)
	$(ROMFSINST) /bin/wum
	mkdir $(DIR_ROMFS)/etc/capwap
	./write_setting
	$(ROMFSINST) ./config.wtp /etc/capwap/config.wtp
	$(ROMFSINST) ./config.ac /etc/capwap/config.ac
	$(ROMFSINST) ./settings.wtp.txt /etc/capwap/settings.wtp.txt
	$(ROMFSINST) ./settings.ac.txt /etc/capwap/settings.ac.txt
	$(ROMFSINST) ./root.pem /etc/capwap/root.pem
	$(ROMFSINST) ./client.pem /etc/capwap/client.pem
	$(ROMFSINST) ./server.pem /etc/capwap/server.pem
#	$(ROMFSINST) ./ip_multicast/r /bin/r
#	$(ROMFSINST) ./ip_multicast/w /bin/w
else
all: deps $(AC_NAME) $(WUM_NAME) $(WTP_NAME) $(AACWTP_NAME)
endif

$(AC_NAME): $(AC_OBJS) 
	$(CC) $(AC_OBJS) $(OPENSSL_INCLUDE) $(LDFLAGS) -o $(AC_NAME) 

$(WTP_NAME): $(WTP_OBJS) 
	$(CC) $(WTP_OBJS) $(LDFLAGS) -o $(WTP_NAME) 

$(AACWTP_NAME): $(AACWTP_OBJS) 
	$(CC) $(AACWTP_OBJS) $(LDFLAGS) -o $(AACWTP_NAME) 

#$(WUA_NAME): $(WUA_OBJS) 
#	$(CC) $(WUA_OBJS) $(LDFLAGS) -o $(WUA_NAME) 

$(WUM_NAME): $(WUM_OBJS) 
	$(CC) $(WUM_OBJS) $(LDFLAGS) -o $(WUM_NAME) 

ifeq ($(CONFIG_APP_OPENCAPWAP),y)
write_setting: write_setting.c ../boa/apmib/apmib.h ../boa/src/version.c
	gcc write_setting.c $(CFLAGS) -o write_setting 
else
#write_setting:
write_setting: write_setting.c ../boa/apmib/apmib.h ../boa/src/version.c
	gcc write_setting.c $(CFLAGS) -o write_setting

endif

$(TST_NAME): $(TST_OBJS) 
	$(CC) $(TST_OBJS) $(LDFLAGS) -o $(TST_NAME) 

clean: 
	#$(RM) $(AC_NAME) $(WTP_NAME) $(WUM_NAME) $(TST_NAME) $(AC_OBJS) $(WTP_OBJS) $(WUM_OBJS) $(TST_OBJS) $(AC_DEPS) $(WTP_DEPS) $(WUM_DEPS) $(TST_DEPS) *.o
	$(RM) $(AC_NAME) $(WTP_NAME) $(AACWTP_NAME) $(WUM_NAME) $(TST_NAME) $(AC_OBJS) $(WTP_OBJS) $(WUM_OBJS) $(TST_OBJS) $(AC_DEPS) $(WTP_DEPS) $(WUM_DEPS) $(TST_DEPS) *.o
#$(WUA_NAME) $(WUA_OBJS) $(WUA_DEPS)

clean_deps:
	#$(AC_DEPS) $(WTP_DEPS) $(WUM_DEPS) $(TST_DEPS)
	$(AC_DEPS) $(WTP_DEPS) $(AACWTP_DEPS) $(WUM_DEPS) $(TST_DEPS)
#$(WUA_DEPS)
	
ifeq ($(CONFIG_APP_OPENCAPWAP),y)
deps: $(AC_SRC) $(WTP_SRC) $(WUM_SRC) $(TST_SRC)
#$(WUA_SRC)
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(AC_SRCS) $(CFLAGS) >/dev/null
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(WTP_SRCS) $(CFLAGS) >/dev/null
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(AACWTP_SRCS) $(CFLAGS) >/dev/null
#	$(CC) -MD -E -DWRITE_STD_OUTPUT $(WUA_SRCS) $(CFLAGS) >/dev/null
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(WUM_SRCS) $(CFLAGS) >/dev/null
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(TST_SRCS) $(CFLAGS) >/dev/null
else
deps: $(AC_SRC) $(WUM_SRC)
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(AC_SRCS) $(CFLAGS) >/dev/null
	$(CC) -MD -E -DWRITE_STD_OUTPUT $(WUM_SRCS) $(CFLAGS) >/dev/null
endif

-include $(AC_DEPS)
-include $(WTP_DEPS)
-include $(AACWTP_DEPS)
#-include $(WUA_DEPS)
-include $(WUM_DEPS)
-include $(TST_DEPS)
