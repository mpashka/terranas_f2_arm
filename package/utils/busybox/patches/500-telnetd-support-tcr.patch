Index: busybox-1.23.2/networking/telnetd.c
===================================================================
--- busybox-1.23.2.orig/networking/telnetd.c	2017-08-04 10:15:30.622191850 +0800
+++ busybox-1.23.2/networking/telnetd.c	2017-08-04 10:15:51.366192345 +0800
@@ -51,8 +51,79 @@
 # define TELOPTS
 #endif
 #include <arpa/telnet.h>
+#ifdef SUPPORT_TCR
+#include <linux/netlink.h>
+#include <linux/genetlink.h>
+#include <sys/socket.h>
+
+struct nlmsghdr *nlh = NULL;
+struct sockaddr_nl src_addr, dest_addr;
+struct iovec iov;
+int sock_fd;
+struct msghdr msg;
+#define NETLINK_USER 31
+#define NETLINK_SIZE_MAX 4096
 
+void create_netlink_sock(void)
+{
+	sock_fd = socket(PF_NETLINK, SOCK_RAW, NETLINK_USER);
+	
+	memset(&src_addr, 0, sizeof(src_addr));
+	src_addr.nl_family = AF_NETLINK;
+	src_addr.nl_pid = getpid();
+	fprintf(stderr, "telnet netlink socket pid is %d\n", src_addr.nl_pid);
+	src_addr.nl_groups = 0;
+	bind(sock_fd, (struct sockaddr*)&src_addr, sizeof(src_addr));
+
+	memset(&dest_addr, 0, sizeof(dest_addr));
+	dest_addr.nl_family = AF_NETLINK;
+	dest_addr.nl_pid = 0;   /* For Linux Kernel */
+	dest_addr.nl_groups = 0; /* unicast */
+
+	nlh=(struct nlmsghdr *)malloc(NLMSG_SPACE(NETLINK_SIZE_MAX));
+}
 
+void send_netlink_msg(unsigned char *data, unsigned int len)
+{
+	if (nlh != NULL)
+	{
+		memset(nlh, 0, NLMSG_SPACE(NETLINK_SIZE_MAX));
+		nlh->nlmsg_len = NLMSG_HDRLEN + len;
+		nlh->nlmsg_pid = getpid();  /* self pid */
+		memcpy(NLMSG_DATA(nlh), data, len);
+		iov.iov_base = (void *)nlh;
+		iov.iov_len = nlh->nlmsg_len;
+ 		msg.msg_name = (void *)&dest_addr;
+ 		msg.msg_namelen = sizeof(dest_addr);
+ 		msg.msg_iov = &iov;
+ 		msg.msg_iovlen = 1;
+		sendmsg(sock_fd, &msg, 0);
+	}
+}
+
+int recv_netlink_msg(unsigned char *dst_buff)
+{
+int ret=0;
+	if (nlh != NULL)
+		{
+			memset(nlh, 0, NLMSG_SPACE(NETLINK_SIZE_MAX));
+         	memset(&iov, 0, sizeof(iov));
+        
+         	iov.iov_base = (void *)nlh;
+         	iov.iov_len = NETLINK_SIZE_MAX;
+         	msg.msg_name = (void *)&dest_addr;
+         	msg.msg_namelen = sizeof(dest_addr);
+         	msg.msg_iov = &iov;
+         	msg.msg_iovlen = 1;
+			ret = recvmsg(sock_fd, &msg, MSG_DONTWAIT);
+			if (ret > 0)
+			{
+				return nlh->nlmsg_len;
+			}
+		}
+		return ret;
+}
+#endif
 struct tsession {
 	struct tsession *next;
 	pid_t shell_pid;
@@ -487,6 +558,7 @@
 	fd_set rdfdset, wrfdset;
 	unsigned opt;
 	int count;
+	static int tcr_flag = 0;
 	struct tsession *ts;
 #if ENABLE_FEATURE_TELNETD_STANDALONE
 #define IS_INETD (opt & OPT_INETD)
@@ -501,6 +573,9 @@
 	};
 #endif
 	INIT_G();
+#ifdef SUPPORT_TCR
+	create_netlink_sock();
+#endif
 
 	/* -w NUM, and implies -F. -w and -i don't mix */
 	IF_FEATURE_TELNETD_INETD_WAIT(opt_complementary = "wF:w+:i--w:w--i";)
@@ -536,7 +611,11 @@
 	} else {
 		master_fd = 0;
 		if (!(opt & OPT_WAIT)) {
+#ifdef SUPPORT_TCR
+			unsigned portnbr = 87;
+#else
 			unsigned portnbr = 23;
+#endif
 			if (opt & OPT_PORT)
 				portnbr = xatou16(opt_portnbr);
 			master_fd = create_and_bind_stream_or_die(opt_bindaddr, portnbr);
@@ -666,6 +745,9 @@
 					goto skip1;
 				goto kill_session;
 			}
+#ifdef SUPPORT_TCR
+			send_netlink_msg(ptr, count);
+#endif
 			ts->size1 -= count;
 			ts->wridx1 += count;
 			if (ts->wridx1 >= BUFSIZE) /* actually == BUFSIZE */
@@ -721,6 +803,26 @@
 				ts->rdidx1 = 0;
 		}
  skip3:
+#ifdef SUPPORT_TCR
+ 		count = recv_netlink_msg(TS_BUF2(ts) + ts->rdidx2);
+ 		fprintf(stderr, "recv sock count is 0x%x.\n", count);
+ 		if (count > 0)
+ 		{
+ 			memcpy((void *)(TS_BUF2(ts) + ts->rdidx2), NLMSG_DATA(nlh), count);
+ 			if (tcr_flag == 0)
+ 				tcr_flag = 1;
+ 		}
+
+ 		if (count > 0)
+ 		{
+ 			ts->size2 += count;
+			ts->rdidx2 += count;
+			if (ts->rdidx2 >= BUFSIZE) /* actually == BUFSIZE */
+				ts->rdidx2 = 0;
+ 		}
+#endif
+ 	if (tcr_flag == 0)
+ 	{
 		if (/*ts->size2 < BUFSIZE &&*/ FD_ISSET(ts->ptyfd, &rdfdset)) {
 			/* Read from pty to buffer 2 */
 			count = MIN(BUFSIZE - ts->rdidx2, BUFSIZE - ts->size2);
@@ -735,6 +837,7 @@
 			if (ts->rdidx2 >= BUFSIZE) /* actually == BUFSIZE */
 				ts->rdidx2 = 0;
 		}
+	}
  skip4:
 		ts = next;
 		continue;
