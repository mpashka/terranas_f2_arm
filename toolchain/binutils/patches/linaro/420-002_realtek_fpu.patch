diff --git a/gas/config/tc-mips.c b/gas/config/tc-mips.c
index ba20397..c6183c6 100644
--- a/gas/config/tc-mips.c
+++ b/gas/config/tc-mips.c
@@ -315,6 +315,10 @@ static int file_ase_mips16;
 #define CPU_IS_RLX (mips_opts.arch == CPU_RLX4281			\
 		    || mips_opts.arch == CPU_RLX5281)
 
+/* True if ISA supports RLX FPU */
+#define CPU_HAS_RLX_FPU (mips_opts.arch == CPU_RLX4281			\
+			 || mips_opts.arch == CPU_RLX5281)
+
 /* True if any microMIPS code was produced.  */
 static int file_ase_micromips;
 
@@ -362,6 +366,7 @@ static int mips_32bitmode = 0;
 /*  Return true if ISA supports 64 bit wide float registers.  */
 #define ISA_HAS_64BIT_FPRS(ISA)		\
   ((ISA) == ISA_MIPS3			\
+   || CPU_HAS_RLX_FPU			\
    || (ISA) == ISA_MIPS4		\
    || (ISA) == ISA_MIPS5		\
    || (ISA) == ISA_MIPS32R2		\
@@ -388,6 +393,7 @@ static int mips_32bitmode = 0;
 /* Return true if ISA supports single-precision floats in odd registers.  */
 #define ISA_HAS_ODD_SINGLE_FPR(ISA)	\
   ((ISA) == ISA_MIPS32			\
+   || CPU_HAS_RLX_FPU			\
    || (ISA) == ISA_MIPS32R2		\
    || (ISA) == ISA_MIPS64		\
    || (ISA) == ISA_MIPS64R2)
@@ -396,6 +402,7 @@ static int mips_32bitmode = 0;
    floating-point register. */
 #define ISA_HAS_MXHC1(ISA)		\
   ((ISA) == ISA_MIPS32R2		\
+   || CPU_HAS_RLX_FPU			\
    || (ISA) == ISA_MIPS64R2)
 
 #define HAVE_32BIT_GPRS		                   \
@@ -573,7 +580,7 @@ static int mips_big_got = 0;
 static int mips_trap = 0;
 
 /* 1 if we should avoid put load in branch delay slot */
-static int fix_bdsl = 1;
+static int fix_bdsl = 0;
 
 /* 1 if double width floating point constants should not be constructed
    by assembling two single width halves into two single width floating
@@ -3262,7 +3269,7 @@ validate_mips_insn (const struct mips_opcode *opcode,
 	      used_bits &= ~(mask & 0x700);
 	  }
 	/* Skip prefix characters.  */
-	if (decode_operand && (*s == '+' || *s == 'm' || *s == '='))
+	if (decode_operand && (*s == '+' || *s == 'm' || *s == '_'))
 	  ++s;
 	opno += 1;
 	break;
@@ -7293,7 +7300,7 @@ match_insn (struct mips_cl_insn *insn, const struct mips_opcode *opcode,
 	abort ();
 
       /* Skip prefixes.  */
-      if (*args == '+' || *args == 'm' || *args == '=')
+      if (*args == '+' || *args == 'm' || *args == '_')
 	args++;
 
       if (mips_optional_operand_p (operand)
@@ -13722,6 +13729,8 @@ md_parse_option (int c, char *arg)
 
     case OPTION_SINGLE_FLOAT:
       file_mips_single_float = 1;
+      if (CPU_HAS_RLX_FPU)
+        as_fatal (_("-msingle-float is not supported by Taroko processor"));
       break;
 
     case OPTION_DOUBLE_FLOAT:
@@ -15041,7 +15050,9 @@ s_mipsset (int x ATTRIBUTE_UNUSED)
 	case ISA_MIPS32:
 	case ISA_MIPS32R2:
 	  mips_opts.gp32 = 1;
-	  mips_opts.fp32 = 1;
+	  /* Don't reset fp32 for Taroko + FPU.  */
+	  if (!CPU_HAS_RLX_FPU || mips_opts.soft_float)
+	    mips_opts.fp32 = 1;
 	  break;
 	case ISA_MIPS3:
 	case ISA_MIPS4:
diff --git a/opcodes/mips-opc.c b/opcodes/mips-opc.c
index 435cf27..0e14dc1 100644
--- a/opcodes/mips-opc.c
+++ b/opcodes/mips-opc.c
@@ -94,7 +94,7 @@ decode_mips_operand (const char *p)
       break;
 
     /* DMP CE and Taroko operand.  */
-    case '=':
+    case '_':
       switch (p[1])
         {
         case 'S': UINT (6, 0); /* 6-bits selection bits */
@@ -1152,10 +1152,10 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"ldaddw",		"t,b",		0x70000010, 0xfc00ffff,	MOD_1|RD_2|SM,		0,		XLR,		0,	0 },
 {"ldaddwu",		"t,b",		0x70000011, 0xfc00ffff,	MOD_1|RD_2|SM,		0,		XLR,		0,	0 },
 {"ldaddd",		"t,b",		0x70000012, 0xfc00ffff,	MOD_1|RD_2|SM,		0,		XLR,		0,	0 },
-{"ldc1",		"T,o(b)",	0xd4000000, 0xfc000000, WR_1|RD_3|CLD|FP_D,	0,		I2,		0,	SF },
-{"ldc1",		"E,o(b)",	0xd4000000, 0xfc000000, WR_1|RD_3|CLD|FP_D,	0,		I2,		0,	SF },
-{"ldc1",		"T,A(b)",	0,    (int) M_LDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		0,	SF },
-{"ldc1",		"E,A(b)",	0,    (int) M_LDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		0,	SF },
+{"ldc1",		"T,o(b)",	0xd4000000, 0xfc000000, WR_1|RD_3|CLD|FP_D,	0,		I2,		RLX,	SF },
+{"ldc1",		"E,o(b)",	0xd4000000, 0xfc000000, WR_1|RD_3|CLD|FP_D,	0,		I2,		RLX,	SF },
+{"ldc1",		"T,A(b)",	0,    (int) M_LDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		RLX,	SF },
+{"ldc1",		"E,A(b)",	0,    (int) M_LDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		RLX,	SF },
 {"l.d",			"T,o(b)",	0xd4000000, 0xfc000000, WR_1|RD_3|CLD|FP_D,	0,		I2,		0,	SF }, /* ldc1 */
 {"l.d",			"T,A(b)",	0,    (int) M_L_DAB,	INSN_MACRO,		INSN2_M_FP_D,	I1,		0,	0 },
 {"ldc2",		"E,o(b)",	0xd8000000, 0xfc000000,	RD_3|WR_CC|CLD,		0,		I2,		0,	IOCT|IOCTP|IOCT2|EE },
@@ -1290,8 +1290,8 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"mfgc0",		"t,G,H",	0x40600000, 0xffe007f8, WR_1|RD_C0|LCD, 	0,		0,		IVIRT,	0 },
 {"mfc1",		"t,S",		0x44000000, 0xffe007ff,	WR_1|RD_2|LCD|FP_S,	0,		I1,		0,	0 },
 {"mfc1",		"t,G",		0x44000000, 0xffe007ff,	WR_1|RD_2|LCD|FP_S,	0,		I1,		0,	0 },
-{"mfhc1",		"t,S",		0x44600000, 0xffe007ff,	WR_1|RD_2|LCD|FP_D,	0,		I33,		0,	0 },
-{"mfhc1",		"t,G",		0x44600000, 0xffe007ff,	WR_1|RD_2|LCD|FP_D,	0,		I33,		0,	0 },
+{"mfhc1",		"t,S",		0x44600000, 0xffe007ff,	WR_1|RD_2|LCD|FP_D,	0,		I33,		RLX,	0 },
+{"mfhc1",		"t,G",		0x44600000, 0xffe007ff,	WR_1|RD_2|LCD|FP_D,	0,		I33,		RLX,	0 },
 /* mfc2 is at the bottom of the table.  */
 /* mfhc2 is at the bottom of the table.  */
 /* mfc3 is at the bottom of the table.  */
@@ -1383,8 +1383,9 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"mtgc0",		"t,G,H",	0x40600200, 0xffe007f8, RD_1|WR_C0|WR_CC|COD,   0,		0,		IVIRT,	0 },
 {"mtc1",		"t,S",		0x44800000, 0xffe007ff,	RD_1|WR_2|COD|FP_S,	0,		I1,		0,	0 },
 {"mtc1",		"t,G",		0x44800000, 0xffe007ff,	RD_1|WR_2|COD|FP_S,	0,		I1,		0,	0 },
-{"mthc1",		"t,S",		0x44e00000, 0xffe007ff,	RD_1|WR_2|COD|FP_D,	0,		I33,		0,	0 },
-{"mthc1",		"t,G",		0x44e00000, 0xffe007ff,	RD_1|WR_2|COD|FP_D,	0,		I33,		0,	0 },
+{"mtc1",		"t,G,_S",	0x44800000, 0xffe007c0,	RD_1|WR_2|COD|FP_S,	0,		0,		RLX,	0 },
+{"mthc1",		"t,S",		0x44e00000, 0xffe007ff,	RD_1|WR_2|COD|FP_D,	0,		I33,		RLX,	0 },
+{"mthc1",		"t,G",		0x44e00000, 0xffe007ff,	RD_1|WR_2|COD|FP_D,	0,		I33,		RLX,	0 },
 /* mtc2 is at the bottom of the table.  */
 /* mthc2 is at the bottom of the table.  */
 /* mtc3 is at the bottom of the table.  */
@@ -1691,10 +1692,10 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"sdbbp",		"c,q",		0x0000000e, 0xfc00003f,	TRAP,			0,		G2,		0,	0 },
 {"sdbbp",		"",		0x7000003f, 0xffffffff, TRAP,           	0,		I32,		RLX,	0 },
 {"sdbbp",		"B",		0x7000003f, 0xfc00003f, TRAP,           	0,		I32,		RLX,	0 },
-{"sdc1",		"T,o(b)",	0xf4000000, 0xfc000000, RD_1|RD_3|SM|FP_D,	0,		I2,		0,	SF },
-{"sdc1",		"E,o(b)",	0xf4000000, 0xfc000000, RD_1|RD_3|SM|FP_D,	0,		I2,		0,	SF },
-{"sdc1",		"T,A(b)",	0,    (int) M_SDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		0,	SF },
-{"sdc1",		"E,A(b)",	0,    (int) M_SDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		0,	SF },
+{"sdc1",		"T,o(b)",	0xf4000000, 0xfc000000, RD_1|RD_3|SM|FP_D,	0,		I2,		RLX,	SF },
+{"sdc1",		"E,o(b)",	0xf4000000, 0xfc000000, RD_1|RD_3|SM|FP_D,	0,		I2,		RLX,	SF },
+{"sdc1",		"T,A(b)",	0,    (int) M_SDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		RLX,	SF },
+{"sdc1",		"E,A(b)",	0,    (int) M_SDC1_AB,	INSN_MACRO,		INSN2_M_FP_D,	I2,		RLX,	SF },
 {"sdc2",		"E,o(b)",	0xf8000000, 0xfc000000,	RD_3|RD_C2|SM,		0,		I2,		0,	IOCT|IOCTP|IOCT2|EE },
 {"sdc2",		"E,A(b)",	0,    (int) M_SDC2_AB,	INSN_MACRO,		0,		I2,		0,	IOCT|IOCTP|IOCT2|EE },
 {"sdc3",		"E,o(b)",	0xfc000000, 0xfc000000,	RD_3|RD_C3|SM,		0,		I2,		0,	IOCT|IOCTP|IOCT2|EE },
@@ -1942,10 +1943,10 @@ const struct mips_opcode mips_builtin_opcodes[] =
 {"zcb",			"(b)",		0x7000071f, 0xfc1fffff, RD_1|SM,		0,		IOCT2,		0,	0 },
 {"zcbt",		"(b)",		0x7000075f, 0xfc1fffff, RD_1|SM,		0,		IOCT2,		0,	0 },
 
-{"mflxc0",		"t,=d",		0x40600000, 0xffe007ff, WR_1|RD_LXC0|LCD,	0,		0,		RLX,	0 },
-{"mflxc0",		"t,=d,=S",	0x40600000, 0xffe007c0, WR_1|RD_LXC0|LCD, 	0,		0,		RLX,	0 },
-{"mtlxc0",		"t,=d",		0x40e00000, 0xffe007ff, RD_1|WR_LXC0|WR_CC|COD,	0,		0,		RLX,	0 },
-{"mtlxc0",		"t,=d,=S",	0x40e00000, 0xffe007c0, RD_1|WR_LXC0|WR_CC|COD, 0,		0,		RLX,	0 },
+{"mflxc0",		"t,_d",		0x40600000, 0xffe007ff, WR_1|RD_LXC0|LCD,	0,		0,		RLX,	0 },
+{"mflxc0",		"t,_d,_S",	0x40600000, 0xffe007c0, WR_1|RD_LXC0|LCD, 	0,		0,		RLX,	0 },
+{"mtlxc0",		"t,_d",		0x40e00000, 0xffe007ff, RD_1|WR_LXC0|WR_CC|COD,	0,		0,		RLX,	0 },
+{"mtlxc0",		"t,_d,_S",	0x40e00000, 0xffe007c0, RD_1|WR_LXC0|WR_CC|COD, 0,		0,		RLX,	0 },
 
 {"sleep",		"",		0x42000038, 0xffffffff, 0, 			0,		0,		RLX,	0 },
 
