diff --git a/gcc/c-parser.c b/gcc/c-parser.c
index 499a230..3ede5f2 100644
--- a/gcc/c-parser.c
+++ b/gcc/c-parser.c
@@ -2049,7 +2049,6 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,
 	case RID_TYPEDEF:
 	case RID_INLINE:
 	case RID_AUTO:
-	case RID_THREAD:
 	  if (!scspec_ok)
 	    goto out;
 	  attrs_ok = true;
@@ -2059,6 +2058,19 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,
 	  declspecs_add_scspec (specs, c_parser_peek_token (parser)->value);
 	  c_parser_consume_token (parser);
 	  break;
+	case RID_THREAD:
+	  if (!scspec_ok)
+	    goto out;
+	  attrs_ok = true;
+	  if (flag_use_tls)
+	    {
+	      /* TODO: Distinguish between function specifiers (inline)
+		 and storage class specifiers, either here or in
+		 declspecs_add_scspec.  */
+	      declspecs_add_scspec (specs, c_parser_peek_token (parser)->value);
+	    }
+	  c_parser_consume_token (parser);
+	  break;
 	case RID_UNSIGNED:
 	case RID_LONG:
 	case RID_INT128:
diff --git a/gcc/common.opt b/gcc/common.opt
index b0c0a1d..f1bcaa3 100644
--- a/gcc/common.opt
+++ b/gcc/common.opt
@@ -1060,6 +1060,10 @@ ffinite-math-only
 Common Report Var(flag_finite_math_only) Optimization SetByCombined
 Assume no NaNs or infinities are generated
 
+ffix-bdsl
+Common Report Var(flag_fix_bdsl) Init(1) Optimization
+Forbid the use of load instructions in the branch delay slots for all cases
+
 ffixed-
 Common Joined RejectNegative Var(common_deferred_options) Defer
 -ffixed-<register>	Mark <register> as being unavailable to the compiler
@@ -2054,6 +2058,10 @@ Just generate unwind tables for exception handling
 fuse-linker-plugin
 Common Undocumented
 
+fuse-tls
+Common Report RejectNegative Var(flag_use_tls) Init(1)
+Allow compiler to emit TLS related codes.
+
 ; Positive if we should track variables, negative if we should run
 ; the var-tracking pass only to discard debug annotations, zero if
 ; we're not to run it.  When flag_var_tracking == 2 (AUTODETECT_VALUE) it
diff --git a/gcc/config.gcc b/gcc/config.gcc
index 108361a..aafb502 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -1919,6 +1919,11 @@ mips*-*-linux*)				# Linux MIPS, either endian.
                 ;;
         mipsisa32*)
 		tm_defines="${tm_defines} MIPS_ISA_DEFAULT=32"
+                ;;
+	*)
+		tm_defines="${tm_defines} MIPS_ISA_DEFAULT=1"
+		target_cpu_default="MASK_SOFT_FLOAT_ABI"
+                ;;
         esac
 	extra_parts="$extra_parts crtfastmath.o"
 	test x$with_llsc != x || with_llsc=yes
@@ -2017,6 +2022,18 @@ mipsisa64sb1-*-elf* | mipsisa64sb1el-*-elf*)
 mips-*-elf* | mipsel-*-elf*)
 	tm_file="elfos.h newlib-stdint.h ${tm_file} mips/elf.h"
 	tmake_file="mips/t-elf mips/t-libgcc-mips16"
+	case ${target} in
+        mipsisa32r2*)
+		tm_defines="${tm_defines} MIPS_ISA_DEFAULT=33"
+                ;;
+        mipsisa32*)
+		tm_defines="${tm_defines} MIPS_ISA_DEFAULT=32"
+                ;;
+	*)
+		tm_defines="${tm_defines} MIPS_ISA_DEFAULT=1"
+		target_cpu_default="MASK_SOFT_FLOAT_ABI"
+                ;;
+        esac
 	;;
 mips64-*-elf* | mips64el-*-elf*)
 	tm_file="elfos.h newlib-stdint.h ${tm_file} mips/elf.h"
diff --git a/gcc/config/mips/mips.c b/gcc/config/mips/mips.c
index 87bf18e..a134ad2 100644
--- a/gcc/config/mips/mips.c
+++ b/gcc/config/mips/mips.c
@@ -684,6 +684,10 @@ static const struct mips_cpu_info mips_cpu_info_table[] = {
   /* ??? For now just tune the generic MIPS64r2 for 5KC as well.   */
   { "mips64r2", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY },
 
+  /* RLX processors */
+  { "4281", PROCESSOR_RLX4281, 1, 0},
+  { "5281", PROCESSOR_RLX5281, 1, 0},
+
   /* MIPS I processors.  */
   { "r3000", PROCESSOR_R3000, 1, 0 },
   { "r2000", PROCESSOR_R3000, 1, 0 },
@@ -12024,6 +12028,8 @@ mips_issue_rate (void)
     case PROCESSOR_R7000:
     case PROCESSOR_R9000:
     case PROCESSOR_OCTEON:
+    case PROCESSOR_RLX4281:
+    case PROCESSOR_RLX5281:
       return 2;
 
     case PROCESSOR_SB1:
diff --git a/gcc/config/mips/mips.h b/gcc/config/mips/mips.h
index 9600dcb..3a699ea 100644
--- a/gcc/config/mips/mips.h
+++ b/gcc/config/mips/mips.h
@@ -232,6 +232,10 @@ enum mips_code_readable_setting {
 				     || mips_arch == PROCESSOR_SB1A)
 #define TARGET_SR71K                (mips_arch == PROCESSOR_SR71000)
 
+#define TARGET_RLX4281              (mips_arch == PROCESSOR_RLX4281)
+#define TARGET_RLX5281              (mips_arch == PROCESSOR_RLX5281)
+#define TARGET_RLX                  (TARGET_RLX4281 || TARGET_RLX5281)
+
 /* Scheduling target defines.  */
 #define TUNE_20KC		    (mips_tune == PROCESSOR_20KC)
 #define TUNE_24K		    (mips_tune == PROCESSOR_24KC	\
@@ -556,6 +560,20 @@ enum mips_code_readable_setting {
 									\
       if (TARGET_CACHE_BUILTIN)						\
 	builtin_define ("__GCC_HAVE_BUILTIN_MIPS_CACHE");		\
+									\
+      if (TARGET_RLX4281)						\
+	builtin_define ("__m4281");					\
+      else if (TARGET_RLX5281)						\
+	builtin_define ("__m5281");					\
+                                                                        \
+      builtin_define ("__USE_ULS__");					\
+									\
+      if (flag_use_tls)							\
+	builtin_define ("__USE_TLS__");					\
+									\
+      if (flag_fix_bdsl)						\
+	builtin_define ("__FIX_BDSL__");				\
+									\
     }									\
   while (0)
 
@@ -731,6 +749,7 @@ enum mips_code_readable_setting {
   "%{mhard-float|msoft-float|march=mips*:; \
      march=vr41*|march=m4k|march=4k*|march=24kc|march=24kec \
      |march=34kc|march=74kc|march=1004kc|march=5kc \
+     |march=4281|march=5281 \
      |march=octeon|march=xlr: -msoft-float;		  \
      march=*: -mhard-float}"
 
@@ -843,7 +862,7 @@ enum mips_code_readable_setting {
 				  || ISA_MIPS64				\
 				  || ISA_MIPS64R2)			\
 				 && !TARGET_MIPS5500			\
-				 && !TARGET_MIPS16)
+				 && (!TARGET_MIPS16 && TARGET_RLX))
 
 /* ISA has the integer conditional move instructions introduced in mips4 and
    ST Loongson 2E/2F.  */
@@ -1011,7 +1030,8 @@ enum mips_code_readable_setting {
    and "addiu $4,$4,1".  */
 #define ISA_HAS_LOAD_DELAY	(ISA_MIPS1				\
 				 && !TARGET_MIPS3900			\
-				 && !TARGET_MIPS16)
+				 && !TARGET_MIPS16			\
+				 && !TARGET_RLX)
 
 /* Likewise mtc1 and mfc1.  */
 #define ISA_HAS_XFER_DELAY	(mips_isa <= 3			\
@@ -1038,7 +1058,8 @@ enum mips_code_readable_setting {
 				 || ISA_MIPS64				\
 				 || ISA_MIPS64R2			\
 				 || TARGET_MIPS5500			\
-				 || TARGET_LOONGSON_2EF)
+				 || TARGET_LOONGSON_2EF			\
+				 || TARGET_RLX)
 
 /* ISA includes synci, jr.hb and jalr.hb.  */
 #define ISA_HAS_SYNCI ((ISA_MIPS32R2		\
@@ -1046,7 +1067,8 @@ enum mips_code_readable_setting {
 		       && !TARGET_MIPS16)
 
 /* ISA includes sync.  */
-#define ISA_HAS_SYNC ((mips_isa >= 2 || TARGET_MIPS3900) && !TARGET_MIPS16)
+#define ISA_HAS_SYNC ((mips_isa >= 2 || TARGET_MIPS3900 || TARGET_RLX)	\
+		      && !TARGET_MIPS16)
 #define GENERATE_SYNC			\
   (target_flags_explicit & MASK_LLSC	\
    ? TARGET_LLSC && !TARGET_MIPS16	\
@@ -1055,7 +1077,7 @@ enum mips_code_readable_setting {
 /* ISA includes ll and sc.  Note that this implies ISA_HAS_SYNC
    because the expanders use both ISA_HAS_SYNC and ISA_HAS_LL_SC
    instructions.  */
-#define ISA_HAS_LL_SC (mips_isa >= 2 && !TARGET_MIPS16)
+#define ISA_HAS_LL_SC ((mips_isa >= 2 || TARGET_RLX) && !TARGET_MIPS16)
 #define GENERATE_LL_SC			\
   (target_flags_explicit & MASK_LLSC	\
    ? TARGET_LLSC && !TARGET_MIPS16	\
@@ -1142,6 +1164,7 @@ enum mips_code_readable_setting {
 %{mshared} %{mno-shared} \
 %{msym32} %{mno-sym32} \
 %{mtune=*} \
+%{ffix-bdsl} \
 %(subtarget_asm_spec)"
 
 /* Extra switches sometimes passed to the linker.  */
@@ -1166,6 +1189,8 @@ enum mips_code_readable_setting {
 
 #undef CC1_SPEC
 #define CC1_SPEC "\
+%{m4281:-march=4281} \
+%{m5281:-march=5281} \
 %{G*} %{EB:-meb} %{EL:-mel} %{EB:%{EL:%emay not use both -EB and -EL}} \
 %(subtarget_cc1_spec)"
 
diff --git a/gcc/config/mips/mips.md b/gcc/config/mips/mips.md
index e629db7..7a458b8 100644
--- a/gcc/config/mips/mips.md
+++ b/gcc/config/mips/mips.md
@@ -52,6 +52,8 @@
   r4300
   r4600
   r4650
+  rlx4281
+  rlx5281
   r5000
   r5400
   r5500
@@ -554,9 +556,13 @@
 
 ;; Can the instruction be put into a delay slot?
 (define_attr "can_delay" "no,yes"
-  (if_then_else (and (eq_attr "type" "!branch,call,jump")
-		     (and (eq_attr "hazard" "none")
-			  (eq_attr "single_insn" "yes")))
+  (if_then_else (and (ior (eq (symbol_ref "TARGET_MIPS16") (const_int 0))
+                         (eq (symbol_ref "flag_fix_bdsl") (const_int 0)))
+		     (ior (eq_attr "type" "!load")
+			 (eq (symbol_ref "flag_fix_bdsl") (const_int 0)))
+                     (and (eq_attr "type" "!branch,call,jump")
+		         (and (eq_attr "hazard" "none")
+			     (eq_attr "single_insn" "yes"))))
 		(const_string "yes")
 		(const_string "no")))
 
@@ -6452,12 +6458,22 @@
 (define_insn "*tls_get_tp_<mode>_split"
   [(set (reg:P TLS_GET_TP_REGNUM)
 	(unspec:P [(const_int 0)] UNSPEC_TLS_GET_TP))]
-  "HAVE_AS_TLS && !TARGET_MIPS16"
+  "!TARGET_RLX && HAVE_AS_TLS && !TARGET_MIPS16"
   ".set\tpush\;.set\tmips32r2\t\;rdhwr\t$3,$29\;.set\tpop"
   [(set_attr "type" "unknown")
    ; See tls_get_tp_<mode>
    (set_attr "can_delay" "no")
    (set_attr "mode" "<MODE>")])
+
+(define_insn "*tls_get_tp_<mode>_split"
+  [(set (reg:P TLS_GET_TP_REGNUM)
+	(unspec:P [(const_int 0)] UNSPEC_TLS_GET_TP))]
+  "TARGET_RLX && HAVE_AS_TLS && !TARGET_MIPS16"
+  "mflxc0\t$3,$8"
+  [(set_attr "type" "unknown")
+   ; See tls_get_tp_<mode>
+   (set_attr "can_delay" "no")
+   (set_attr "mode" "<MODE>")])
 
 ;; Synchronization instructions.
 
