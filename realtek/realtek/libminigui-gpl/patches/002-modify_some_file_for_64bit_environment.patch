--- a/include/common.h
+++ b/include/common.h
@@ -312,17 +312,17 @@ typedef int BOOL;
  * \var typedef unsigned int GHANDLE
  * \brief General handle.
  */
-typedef unsigned int GHANDLE;
+typedef unsigned long GHANDLE;
 /**
  * \var typedef unsigned int HWND
  * \brief Handle to main window or control.
  */
-typedef unsigned int HWND;
+typedef unsigned long HWND;
 /**
  * \var typedef unsigned int HDC
  * \brief Handle to device context.
  */
-typedef unsigned int HDC;
+typedef unsigned long HDC;
 /**
  * \var typedef unsigned int HPALETTE
  * \brief Handle to a logical palette.
@@ -337,12 +337,12 @@ typedef unsigned int HCURSOR;
  * \var typedef unsigned int HICON
  * \brief Handle to icon.
  */
-typedef unsigned int HICON;
+typedef unsigned long HICON;
 /**
  * \var typedef unsigned int HMENU
  * \brief Handle to menu.
  */
-typedef unsigned int HMENU;
+typedef unsigned long HMENU;
 /**
  * \var typedef unsigned int HACCEL
  * \brief Handle to accelarator.
@@ -427,7 +427,7 @@ typedef long            LONG;
  * \var typedef unsigned int WPARAM
  * \brief A type definition for the first message paramter.
  */
-typedef unsigned int    WPARAM;
+typedef unsigned long    WPARAM;
 
 /**
  * \var typedef unsigned long LPARAM
--- a/include/window.h
+++ b/include/window.h
@@ -4105,7 +4105,7 @@ typedef struct _WINDOWINFO
  */
 static inline const WINDOWINFO* GUIAPI GetWindowInfo (HWND hWnd)
 {
-    return (WINDOWINFO*)((unsigned char*)hWnd + 2*sizeof (short));
+    return (WINDOWINFO*)((unsigned char*)hWnd + 2*sizeof (short) + sizeof(int));
 }
 
 /** 
--- a/src/include/ctrlclass.h
+++ b/src/include/ctrlclass.h
@@ -45,7 +45,7 @@ typedef struct tagCONTROL
     unsigned char DataType;         // the data type
     unsigned char WinType;          // the window type
 	unsigned short Flags;           // speical runtime flags, such EraseBkGnd flags
-
+	int fills;
     int left, top;          // the position of control in main window's
     int right, bottom;      // client area.
 
--- a/src/include/dc.h
+++ b/src/include/dc.h
@@ -442,7 +442,7 @@ static inline BYTE* _dc_get_dst (PDC pdc
 
 static inline void _dc_step_y (PDC pdc, int step)
 {
-    pdc->cur_dst += pdc->surface->pitch * step;
+    pdc->cur_dst += (unsigned long)pdc->surface->pitch * (long)step;
 }
 
 #ifndef _MGRM_THREADS
--- a/src/include/internals.h
+++ b/src/include/internals.h
@@ -296,7 +296,7 @@ typedef struct _MAINWIN
     unsigned char DataType;     // the data type.
     unsigned char WinType;      // the window type.
 	unsigned short Flags;       // special runtime flags, such EraseBkGnd flags
-
+	int fills;
     int left, top;      // the position and size of main window.
     int right, bottom;
 
--- a/src/kernel/cursor.c
+++ b/src/kernel/cursor.c
@@ -125,7 +125,7 @@ HCURSOR GUIAPI LoadCursorFromFile(const
 
     /* read the cursor image info. */
     fseek(fp, offset, SEEK_SET);
-    fseek(fp, sizeof(DWORD), SEEK_CUR); /* skip the biSize member. */
+    fseek(fp, 4, SEEK_CUR); /* skip the biSize member. */
     imagew = MGUI_ReadLE32FP (fp);
     imageh = MGUI_ReadLE32FP (fp);
     /* check the biPlanes member; */
@@ -135,11 +135,11 @@ HCURSOR GUIAPI LoadCursorFromFile(const
     wTemp = MGUI_ReadLE16FP (fp);
     if(wTemp > 4) goto error;
     colornum = (int)wTemp;
-    fseek(fp, sizeof(DWORD), SEEK_CUR); /* skip the biCompression members. */
+    fseek(fp, 4, SEEK_CUR); /* skip the biCompression members. */
     imagesize = MGUI_ReadLE32FP (fp);
 
     /* skip the rest members and the color table. */
-    fseek(fp, sizeof(DWORD)*4 + sizeof(BYTE)*(4<<colornum), SEEK_CUR);
+    fseek(fp, 16 + sizeof(BYTE)*(4<<colornum), SEEK_CUR);
     
     /* allocate memory for image. */
     if ((image = (BYTE*)ALLOCATE_LOCAL (imagesize)) == NULL)
--- a/src/misc/endianrw.c
+++ b/src/misc/endianrw.c
@@ -21,12 +21,26 @@
 #include "common.h"
 #include "endianrw.h"
 
+int checkSystem(void)
+{
+    union check
+    {
+        int i;
+	char ch;
+    }c;
+    c.i = 1;
+    return (c.ch==1);
+}
+
 Uint16 MGUI_ReadLE16 (MG_RWops *src)
 {
 	Uint16 value;
 
 	MGUI_RWread(src, &value, (sizeof value), 1);
-	return(ArchSwapLE16(value));
+	if(1==checkSystem())
+	     return value;
+        else
+	    return(ArchSwapLE16(value));
 }
 
 Uint16 MGUI_ReadBE16 (MG_RWops *src)
@@ -42,7 +56,10 @@ Uint32 MGUI_ReadLE32 (MG_RWops *src)
 	Uint32 value;
 
 	MGUI_RWread(src, &value, (sizeof value), 1);
-	return(ArchSwapLE32(value));
+	if(1==checkSystem())
+	     return value;
+        else
+	    return(ArchSwapLE32(value));
 }
 
 Uint32 MGUI_ReadBE32 (MG_RWops *src)
@@ -110,7 +127,10 @@ Uint16 MGUI_ReadLE16FP (FILE *src)
 	Uint16 value;
 
 	fread (&value, (sizeof value), 1, src);
-	return(ArchSwapLE16(value));
+	if(1==checkSystem())
+	     return value;
+        else
+	     return(ArchSwapLE16(value));
 }
 
 Uint32 MGUI_ReadLE32FP (FILE *src)
@@ -118,7 +138,10 @@ Uint32 MGUI_ReadLE32FP (FILE *src)
 	Uint32 value;
 
 	fread(&value, (sizeof value), 1, src);
-	return(ArchSwapLE32(value));
+	if(1==checkSystem())
+	     return value;
+        else
+	     return(ArchSwapLE32(value));
 }
 
 int MGUI_WriteLE16FP (FILE *dst, Uint16 value)
--- a/src/newgdi/icon.c
+++ b/src/newgdi/icon.c
@@ -156,7 +156,7 @@ HICON GUIAPI LoadIconFromFile (HDC hdc,
 
     /* read the cursor image info. */
     fseek(fp, offset, SEEK_SET);
-    fseek(fp, sizeof(DWORD), SEEK_CUR); /* skip the biSize member.*/
+    fseek(fp, 4, SEEK_CUR); /* skip the biSize member.*/
     imagew = MGUI_ReadLE32FP (fp);
     imageh = MGUI_ReadLE32FP (fp);
 
@@ -169,7 +169,7 @@ HICON GUIAPI LoadIconFromFile (HDC hdc,
     if(wTemp > 8) goto error;
 
     colornum = (int)wTemp;
-    fseek(fp, sizeof(DWORD), SEEK_CUR); /* skip the biCompression members.*/
+    fseek(fp, 4, SEEK_CUR); /* skip the biCompression members.*/
 
     if (colornum == 1)
         imagesize = align_32_bits(w>>3) * h;
@@ -179,10 +179,10 @@ HICON GUIAPI LoadIconFromFile (HDC hdc,
         imagesize = align_32_bits(w) * h;
 
     imagesize += align_32_bits(w>>3) * h;
-    fseek(fp, sizeof(DWORD), SEEK_CUR);
+    fseek(fp, 4, SEEK_CUR);
 
     /* skip the rest members and the color table.*/
-    fseek(fp, sizeof(DWORD)*4, SEEK_CUR);
+    fseek(fp, 16, SEEK_CUR);
     read_bmicolors_f (1 << colornum, pal, fp);
     
     /* allocate memory for image.*/
