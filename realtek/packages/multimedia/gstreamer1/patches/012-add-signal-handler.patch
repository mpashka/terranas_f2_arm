diff --git a/tools/gst-launch.c b/tools/gst-launch.c
index 7c0da04..a2039c5 100644
--- a/tools/gst-launch.c
+++ b/tools/gst-launch.c
@@ -466,7 +466,7 @@ print_toc_entry (gpointer data, gpointer user_data)
 }
 
 #if defined(G_OS_UNIX) || defined(G_OS_WIN32)
-static guint signal_watch_id;
+static guint signal_watch_id, signal_watch_id1;
 #if defined(G_OS_WIN32)
 static GstElement *intr_pipeline;
 #endif
@@ -483,16 +483,38 @@ intr_handler (gpointer user_data)
   PRINT ("handling interrupt.\n");
 
   /* post an application specific message */
-  gst_element_post_message (GST_ELEMENT (pipeline),
-      gst_message_new_application (GST_OBJECT (pipeline),
-          gst_structure_new ("GstLaunchInterrupt",
-              "message", G_TYPE_STRING, "Pipeline interrupted", NULL)));
+  if(signal_watch_id !=0 && signal_watch_id1 != 0){
+      gst_element_post_message (GST_ELEMENT (pipeline),
+          gst_message_new_application (GST_OBJECT (pipeline),
+              gst_structure_new ("GstLaunchInterrupt",
+                  "message", G_TYPE_STRING, "Pipeline interrupted", NULL)));
+  }
 
   /* remove signal handler */
   signal_watch_id = 0;
   return FALSE;
 }
 
+static gboolean
+term_handler (gpointer user_data)
+{
+  GstElement *pipeline = (GstElement *) user_data;
+
+  PRINT ("handling interrupt.\n");
+
+  /* post an application specific message */
+  if(signal_watch_id !=0 && signal_watch_id1 != 0){
+      gst_element_post_message (GST_ELEMENT (pipeline),
+          gst_message_new_application (GST_OBJECT (pipeline),
+              gst_structure_new ("GstLaunchInterrupt",
+                  "message", G_TYPE_STRING, "Pipeline interrupted", NULL)));
+  }
+
+  /* remove signal handler */
+  signal_watch_id1 = 0;
+  return FALSE;
+}
+
 #if defined(G_OS_WIN32)         /* G_OS_UNIX */
 static BOOL WINAPI
 w32_intr_handler (DWORD dwCtrlType)
@@ -522,6 +544,10 @@ event_loop (GstElement * pipeline, gboolean blocking, gboolean do_progress,
 #ifdef G_OS_UNIX
   signal_watch_id =
       g_unix_signal_add (SIGINT, (GSourceFunc) intr_handler, pipeline);
+
+  signal_watch_id1 =
+       g_unix_signal_add (SIGTERM, (GSourceFunc) term_handler, pipeline);
+
 #elif defined(G_OS_WIN32)
   intr_pipeline = NULL;
   if (SetConsoleCtrlHandler (w32_intr_handler, TRUE))
@@ -849,8 +875,12 @@ exit:
       gst_message_unref (message);
     gst_object_unref (bus);
 #ifdef G_OS_UNIX
-    if (signal_watch_id > 0)
-      g_source_remove (signal_watch_id);
+#if 1
+    if (signal_watch_id > 0 && signal_watch_id1 > 0){
+        g_source_remove (signal_watch_id);
+        g_source_remove (signal_watch_id1);
+    }
+#endif
 #elif defined(G_OS_WIN32)
     intr_pipeline = NULL;
     SetConsoleCtrlHandler (w32_intr_handler, FALSE);
